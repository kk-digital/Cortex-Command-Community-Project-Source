//////////////////////////////////////////////////////////////////////////////////////////
// File:            ActorEditor.cpp
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Source file for the ActorEditor class.
// Project:         Retro Terrain Engine
// Author(s):       Daniel Tabar
//                  data@datarealms.com
//                  http://www.datarealms.com


//////////////////////////////////////////////////////////////////////////////////////////
// Inclusions of header files

#include "ActorEditor.h"
#include "PresetMan.h"
#include "MovableMan.h"
#include "UInputMan.h"
//#include "AHuman.h"
//#include "MOPixel.h"
#include "SLTerrain.h"
#include "Controller.h"
//#include "AtomGroup.h"
#include "Actor.h"
#include "AHuman.h"
#include "ACRocket.h"
#include "HeldDevice.h"
#include "Scene.h"
#include "DataModule.h"

#include "GUI.h"
#include "GUIFont.h"
#include "AllegroScreen.h"
#include "AllegroBitmap.h"
#include "AllegroInput.h"
#include "GUIControlManager.h"
#include "GUICollectionBox.h"
#include "GUITab.h"
#include "GUIListBox.h"
#include "GUITextBox.h"
#include "GUIButton.h"
#include "GUILabel.h"
#include "GUIComboBox.h"

#include "ObjectPickerGUI.h"
#include "PieMenuGUI.h"

namespace RTE {

ConcreteClassInfo(ActorEditor, EditorActivity, 0);


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Clear
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Clears all the member variables of this ActorEditor, effectively
//                  resetting the members of this abstraction level only.

void ActorEditor::Clear()
{
}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Makes the ActorEditor object ready for use.

int ActorEditor::Create()
{
    return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Creates a ActorEditor to be identical to another, by deep copy.

int ActorEditor::Create(const ActorEditor &reference)
{
    return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  ReadProperty
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Reads a property value from a reader stream. If the name isn't
//                  recognized by this class, then ReadProperty of the parent class
//                  is called. If the property isn't recognized by any of the base classes,
//                  false is returned, and the reader's position is untouched.

int ActorEditor::ReadProperty(const std::string_view &propName, Reader &reader)
{
    return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Save
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Saves the complete state of this ActorEditor with a Writer for
//                  later recreation with Create(Reader &reader);

int ActorEditor::Save(Writer &writer) const {
	return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Destroy
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Destroys and resets (through Clear()) the ActorEditor object.

void ActorEditor::Destroy(bool notInherited)
{
}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Start
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Officially starts this. Creates all the data etc necessary to start
//                  the activity.

int ActorEditor::Start()
{
    return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Pause
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Pauses and unpauses the game.

void ActorEditor::SetPaused(bool pause)
{
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          End
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Forces the current game's end.

void ActorEditor::End()
{
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Update
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Updates the state of this ActorEditor. Supposed to be done every frame
//                  before drawing.

void ActorEditor::Update()
{
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          DrawGUI
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws the currently active GUI of a screen to a BITMAP of choice.

void ActorEditor::DrawGUI(BITMAP *pTargetBitmap, const Vector &targetPos, int which)
{
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Draw
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws this ActorEditor's current graphical representation to a
//                  BITMAP of choice. This includes all game-related graphics.

void ActorEditor::Draw(BITMAP *pTargetBitmap, const Vector &targetPos)
{
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          LoadActor
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Reloads the Actor itself and sets up the pie menu to match its setup.

bool ActorEditor::LoadActor(const Entity *pActorToLoad)
{
    return true;
}

//////////////////////////////////////////////////////////////////////////////////////////
// Method:          ReloadActorData
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Reloads the ini with the currently edited Actor's definitions.

bool ActorEditor::ReloadActorData()
{
    return false;
}


} // namespace RTE