#include "GUI.h"
#include "GUIButton.h"
#include "AllegroBitmap.h"
#include "GUILabel.h"

using namespace RTE;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIButton::GUIButton(GUIManager *Manager, GUIControlManager *ControlManager) : GUIControl(), GUIPanel(Manager) {
	m_ControlID = "BUTTON";
	m_DrawBitmap = nullptr;
	m_ControlManager = ControlManager;
	m_Pushed = false;
	m_Over = false;
	m_Text = nullptr;
	m_Icon = nullptr;
	m_BorderSizes = nullptr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::Create(const std::string &Name, int X, int Y, int Width, int Height) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::Create(GUIProperties *Props) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::Destroy() {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::ChangeSkin(GUISkin *Skin) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::BuildBitmap() {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::Draw(GUIScreen *Screen) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::OnMouseDown(int X, int Y, int Buttons, int Modifier) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::OnMouseUp(int X, int Y, int Buttons, int Modifier) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::OnMouseEnter(int X, int Y, int Buttons, int Modifier) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::OnMouseLeave(int X, int Y, int Buttons, int Modifier) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::OnGainFocus() {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::OnLoseFocus() {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::OnMouseMove(int X, int Y, int Buttons, int Modifier) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::OnKeyDown(int KeyCode, int Modifier) {

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel * GUIButton::GetPanel() {
	return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::GetControlRect(int *X, int *Y, int *Width, int *Height) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::StoreProperties() {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::Move(int X, int Y) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::Resize(int Width, int Height) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::SetPushed(bool pushed) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::SetText(const std::string_view &newText, bool noBitmapRebuild) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const std::string & GUIButton::GetText() const {
	return m_Text->GetText();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::SetHorizontalOverflowScroll(bool newOverflowScroll) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::SetVerticalOverflowScroll(bool newOverflowScroll) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::SetIcon(BITMAP *newIcon, bool noBitmapRebuild) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::SetIconAndText(BITMAP *newIcon, const std::string_view &newText) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIButton::ApplyProperties(GUIProperties *Props) {
}