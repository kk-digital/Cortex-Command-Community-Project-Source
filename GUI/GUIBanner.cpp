//////////////////////////////////////////////////////////////////////////////////////////
// File:            GUIBanner.cpp
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     GUIBanner class
// Project:         Retro Terrain Engine
// Author(s):       Daniel Tabar
//                  data@datarealms.com
//                  http://www.datarealms.com


//////////////////////////////////////////////////////////////////////////////////////////
// Inclusions of header files

#include "GUIBanner.h"
#include "ContentFile.h"

namespace RTE {

map<string, GUIBanner::FontChar *> GUIBanner::m_sFontCache;
map<string, int> GUIBanner::m_sCharCapCache;


//////////////////////////////////////////////////////////////////////////////////////////
// Constructor:     GUIBanner
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Constructor method used to instantiate a GUIBanner object in system
//                  memory.

GUIBanner::GUIBanner()
{
    m_pFontImage[REGULAR] = 0;
    m_pFontImage[BLURRED] = 0;
    memset(m_aaFontChars[REGULAR], 0, sizeof(FontChar) * MAXBANNERFONTCHARS);
    memset(m_aaFontChars[BLURRED], 0, sizeof(FontChar) * MAXBANNERFONTCHARS);
    m_CharIndexCap = MAXBANNERFONTCHARS;
    m_FontHeight = 0;
    m_Kerning = 0;
    m_BannerText.clear();
    m_BannerChars.clear();
    m_TargetSize.Reset();
    m_BannerPosY = 240;
    m_FlySpeed = 1500;
    m_FlySpacing = 100;
    m_BannerChars.clear();
    m_AnimMode = BLINKING;
    m_AnimState = NOTSTARTED;
    m_TotalAnimTimer.Reset();
    m_DisplayTimer.Reset();
    m_SpacingTimer.Reset();
    m_FrameTimer.Reset();
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Create the font from an image file.

bool GUIBanner::Create(const std::string fontFilePath, const std::string fontBlurFilePath, int bitDepth) { return true; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Destroy
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Destroys the font data

void GUIBanner::Destroy()
{
    m_BannerText.clear();
    m_BannerChars.clear();
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SpaceBetween
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Tells how much space, in pixels, currently exists between two flying
//                  characters.

int GUIBanner::SpaceBetween(const FlyingChar &first, FontMode firstMode, const FlyingChar &second, FontMode secondMode) const
{
    return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          ShowText
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Starts the display animation of a text string in this banner's font.

void GUIBanner::ShowText(const string text, AnimMode mode, long duration, Vector targetSize, float yOnTarget, int flySpeed, int flySpacing)
{
}

/*
//////////////////////////////////////////////////////////////////////////////////////////
// Method:          HideText
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Tells the banner to animate away elegantly. Especially useful when
//                  a ShowText is waiting with a negative duration.

void GUIBanner::HideText()
{
    
}
*/

//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Update
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Updates the position of the flying characters of this banner.

void GUIBanner::Update()
{
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Draw
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws text to a bitmap.

void GUIBanner::Draw(BITMAP *pTargetBitmap)
{
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          CalculateWidth
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Calculates the width of a piece of text.

int GUIBanner::CalculateWidth(const std::string text, FontMode mode) const
{
    return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          CalculateWidth
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Calculates the width of a piece of text.

int GUIBanner::CalculateWidth(const char Character, FontMode mode) const
{
    return 0;
}

} // namespace RTE
