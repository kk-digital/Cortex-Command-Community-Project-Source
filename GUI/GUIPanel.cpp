#include "GUI.h"

using namespace RTE;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel::GUIPanel(GUIManager *Manager) {
	Clear();
	m_Manager = Manager;
	m_Font = nullptr;
	m_FontColor = 0;
	m_FontShadow = 0;
	m_FontKerning = 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel::GUIPanel() {
	Clear();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::Clear(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::Setup(GUIManager *manager, int ZPos){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::AddChild(GUIPanel *child, bool convertToAbsolutePos){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::RemoveChild(const GUIPanel *pChild){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::LoadProperties(GUIProperties *Props){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::Invalidate() {
	m_ValidRegion = false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIPanel::IsValid() const {
	return m_ValidRegion;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::Draw(GUIScreen *Screen){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnMouseDown(int X, int Y, int Buttons, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnMouseUp(int X, int Y, int Buttons, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnDoubleClick(int X, int Y, int Buttons, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnMouseMove(int X, int Y, int Buttons, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnMouseEnter(int X, int Y, int Buttons, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnMouseLeave(int X, int Y, int Buttons, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnMouseHover(int X, int Y, int Buttons, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnKeyDown(int KeyCode, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnKeyUp(int KeyCode, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnKeyPress(int KeyCode, int Modifier) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnGainFocus() {
	m_GotFocus = true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::OnLoseFocus() {
	m_GotFocus = false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::CaptureMouse() {
	m_Manager->CaptureMouse(this);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::ReleaseMouse() {
	m_Manager->ReleaseMouse();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel* GUIPanel::BottomPanelUnderPoint(int x, int y) { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel* GUIPanel::TopPanelUnderPoint(int x, int y) { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIPanel::PointInside(int X, int Y) { return false; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::SetSize(int Width, int Height){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::SetPositionAbs(int X, int Y, bool moveChildren){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::SetPositionRel(int X, int Y){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::MoveRelative(int dX, int dY){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::CenterInParent(bool centerX, bool centerY){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::_SetVisible(bool Visible) {
	m_Visible = Visible;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIPanel::_GetVisible() const {
	return m_Visible;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::_SetEnabled(bool Enabled) {
	m_Enabled = Enabled;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIPanel::_GetEnabled() const {
	return m_Enabled;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIPanel::GetWidth() const {
	return m_Width;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIPanel::GetHeight() const {
	return m_Height;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIRect* GUIPanel::GetRect() { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::GetRect(int *X, int *Y, int *Width, int *Height) const{}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIPanel::GetPanelID() const {
	return m_ID;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::TrackMouseHover(bool Enabled, int Delay) {
	m_Manager->TrackMouseHover(this, Enabled, Delay);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::SetFocus() {
	m_Manager->SetFocus(this);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIPanel::HasFocus() const {
	return m_GotFocus;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::SetCaptureState(bool Captured) {
	m_Captured = Captured;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIPanel::IsCaptured() const {
	return m_Captured;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIPanel::IsEnabled() const {
	return m_Enabled;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::SendSignal(int Code, int Data) {
	if (m_SignalTarget) { m_SignalTarget->ReceiveSignal(this, Code, Data); }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::ReceiveSignal(GUIPanel *Source, int Code, int Data) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::SetSignalTarget(GUIPanel *Target) {
	if (Target) { m_SignalTarget = Target; }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel * GUIPanel::GetParentPanel() {
	return m_Parent;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::SetZPos(int Z) {
	m_ZPos = Z;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIPanel::GetZPos() const {
	return m_ZPos;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::ChangeZPosition(int Type){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::_ChangeZ(GUIPanel *Child, int Type){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::string GUIPanel::ToString() {
	return "";
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::BuildProperties(GUIProperties *Prop){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::string GUIPanel::WriteValue(const std::string &Name, int Value) {
	return "";
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::string GUIPanel::WriteValue(const std::string &Name, bool Value) {
	return "";
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIPanel::_ApplyProperties(GUIProperties *Props) {
	assert(Props);

	Props->GetValue("Visible", &m_Visible);
	Props->GetValue("Enabled", &m_Enabled);
}