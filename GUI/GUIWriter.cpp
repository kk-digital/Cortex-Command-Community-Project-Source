#include "GUIWriter.h"

namespace RTE {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void GUIWriter::Clear() {
		m_Stream = nullptr;
		m_FilePath.clear();
		m_FolderPath.clear();
		m_FileName.clear();
		m_IndentCount = 0;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter::GUIWriter() {
		Clear();
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	int GUIWriter::Create(const std::string &fileName, bool append) {
		return 0;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	std::string GUIWriter::GetFilePath() const {
		return m_FilePath;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	std::string GUIWriter::GetFileName() const {
		return m_FileName;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	std::string GUIWriter::GetFolderPath() const {
		return m_FolderPath;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void GUIWriter::ObjectStart(const std::string &className) {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void GUIWriter::ObjectEnd() {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void GUIWriter::NewLine(bool toIndent, int lineCount) const {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void GUIWriter::NewLineString(const std::string &textString, bool toIndent) const {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void GUIWriter::NewDivider(bool toIndent, int dividerLength) const {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void GUIWriter::NewProperty(const std::string &propName) const {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	bool GUIWriter::WriterOK() const {
		return false;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void GUIWriter::EndWrite() const {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const bool &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const char &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const unsigned char &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const short &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const unsigned short &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const int &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const unsigned int &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const long &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const long long &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const unsigned long &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const unsigned long long &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const float &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const double &var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const char *var) {
		return *this;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GUIWriter & GUIWriter::operator<<(const std::string &var) {
		return *this;
	}
}