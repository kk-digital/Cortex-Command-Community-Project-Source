#include "GUI.h"
#include "GUIListPanel.h"

using namespace RTE;

#define RIGHTTEXTWIDTH 36

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIListPanel::GUIListPanel(GUIManager *Manager) : GUIPanel(Manager) {
	m_BaseBitmap = nullptr;
	m_DrawBitmap = nullptr;
	m_FrameBitmap = nullptr;
	m_Font = nullptr;
	m_Items.clear();
	m_SelectedList.clear();
	m_UpdateLocked = false;
	m_LargestWidth = 0;
	m_MultiSelect = false;
	m_LastSelected = -1;
	m_FontColor = 0;
	m_FontSelectColor = 0;
	m_SelectedColorIndex = 0;
	m_CapturedHorz = false;
	m_CapturedVert = false;
	m_ExternalCapture = false;
	m_HotTracking = false;
	m_HorzScrollEnabled = true;
	m_VertScrollEnabled = true;
	m_ScrollBarThickness = 17;
	m_ScrollBarPadding = 0;
	m_AlternateDrawMode = false;
	m_LoopSelectionScroll = false;
	m_MouseScroll = false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIListPanel::GUIListPanel() : GUIPanel() {
	m_BaseBitmap = nullptr;
	m_DrawBitmap = nullptr;
	m_FrameBitmap = nullptr;
	m_Font = nullptr;
	m_Items.clear();
	m_SelectedList.clear();
	m_UpdateLocked = false;
	m_LargestWidth = 0;
	m_MultiSelect = false;
	m_LastSelected = -1;
	m_FontColor = 0;
	m_FontSelectColor = 0;
	m_SelectedColorIndex = 0;
	m_CapturedHorz = false;
	m_CapturedVert = false;
	m_ExternalCapture = false;
	m_HotTracking = false;
	m_HorzScrollEnabled = true;
	m_VertScrollEnabled = true;
	m_ScrollBarThickness = 17;
	m_ScrollBarPadding = 0;
	m_AlternateDrawMode = false;
	m_LoopSelectionScroll = false;
	m_MouseScroll = false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::Create(int X, int Y, int Width, int Height) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::Destroy() {
	// Destroy the items
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ClearList() {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::AddItem(const std::string &Name, const std::string &rightText, GUIBitmap *pBitmap, const Entity *pEntity, const int extraIndex) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ChangeSkin(GUISkin *Skin) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::BuildBitmap(bool UpdateBase, bool UpdateText) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::BuildDrawBitmap() {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::Draw(GUIScreen *Screen) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnMouseDown(int X, int Y, int Buttons, int Modifier) {
	m_ExternalCapture = IsCaptured();

	// Over a scrollbar
	if (m_VertScroll->_GetVisible() && m_VertScroll->PointInside(X, Y)) {
		m_VertScroll->OnMouseDown(X, Y, Buttons, Modifier);
		return;
	}
	if (m_HorzScroll->_GetVisible() && m_HorzScroll->PointInside(X, Y)) {
		m_HorzScroll->OnMouseDown(X, Y, Buttons, Modifier);
		return;
	}

	// Give this panel focus
	SetFocus();

	if ((Buttons & MOUSE_LEFT) && PointInside(X, Y)) {
		SelectItem(X, Y, Modifier);
		SendSignal(MouseDown, Buttons);
	} else {
		// Click signifies mouse down anywhere outside the list panel.
		SendSignal(Click, Buttons);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnMouseWheelChange(int x, int y, int modifier, int mouseWheelChange) {
	if (!m_MouseScroll) {
		return;
	} else if (m_VertScroll->_GetVisible() && m_VertScroll->PointInside(x, y)) {
		ScrollBarScrolling(mouseWheelChange);
	} else if (PointInsideList(x, y) && !m_MultiSelect) {
		SelectionListScrolling(mouseWheelChange);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SelectItem(int X, int Y, int Modifier){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnMouseUp(int X, int Y, int Buttons, int Modifier) {
	if (m_CapturedVert) {
		m_VertScroll->OnMouseUp(X, Y, Buttons, Modifier);
	} else if (m_CapturedHorz) {
		m_HorzScroll->OnMouseUp(X, Y, Buttons, Modifier);
	} else {
		if (PointInside(X, Y)) {
			//SendSignal(Select, 0);
		//} else {
			SendSignal(MouseUp, Buttons);
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnMouseMove(int X, int Y, int Buttons, int Modifier) {
	if (m_CapturedVert) {
		m_VertScroll->OnMouseMove(X, Y, Buttons, Modifier);
	} else if (m_CapturedHorz) {
		m_HorzScroll->OnMouseMove(X, Y, Buttons, Modifier);
	} else if (PointInsideList(X, Y)) {
		// Using Hot-Tracking
		if (m_HotTracking && GetItem(X, Y) != nullptr && (GetItem(X, Y) != GetSelected())) { SelectItem(X, Y, Modifier); }
		SendSignal(MouseMove, Buttons);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnMouseEnter(int X, int Y, int Buttons, int Modifier) {
	SendSignal(MouseEnter, Buttons);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnMouseLeave(int X, int Y, int Buttons, int Modifier) {
	SendSignal(MouseLeave, Buttons);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnDoubleClick(int X, int Y, int Buttons, int Modifier) {
	if (PointInside(X, Y)) { SendSignal(DoubleClick, Buttons); }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::BeginUpdate() {
	m_UpdateLocked = true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::EndUpdate() {
	m_UpdateLocked = false;

	// Invoke an update by called the ChangeSkin function
	ChangeSkin(m_Skin);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ScrollToItem(Item *pItem) {
	if (pItem && m_VertScroll->_GetVisible()) {
		int stackHeight = GetStackHeight(pItem);
		int itemHeight = GetItemHeight(pItem);
		// Adjust the vertical scroll bar to show the specified item
		if (stackHeight < m_VertScroll->GetValue()) { m_VertScroll->SetValue(stackHeight); }
		if (stackHeight + itemHeight > m_VertScroll->GetValue() + m_VertScroll->GetPageSize()) { m_VertScroll->SetValue(stackHeight + itemHeight - m_VertScroll->GetPageSize()); }
	}
	BuildBitmap(false, true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ScrollUp() {
	if (m_VertScroll->_GetVisible()) { m_VertScroll->SetValue(m_VertScroll->GetValue() - 20); }
	BuildBitmap(false, true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ScrollDown() {
	if (m_VertScroll->_GetVisible()) {
		int scrollValueToAdd = 20;
		if (!m_Items.empty()) {
			RTE::GUIListPanel::Item *item = m_Items.back();
			int maximumScrollDistance = GetStackHeight(item) + GetItemHeight(item) - (m_VertScroll->GetPageSize() + m_VertScroll->GetValue());
			scrollValueToAdd = std::clamp(maximumScrollDistance, 0, scrollValueToAdd);
		}
		m_VertScroll->SetValue(m_VertScroll->GetValue() + scrollValueToAdd);
	}
	BuildBitmap(false, true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ScrollTo(int position) {
	if (m_VertScroll->_GetVisible()) {
		m_VertScroll->SetValue(position);

		//TODO this was copied from MaxShadow's work. I'm not quite sure of the point of it tbh.
		if (!m_Items.empty()) {
			RTE::GUIListPanel::Item *item = m_Items.back();
			int allItemsHeight = GetStackHeight(item) + GetItemHeight(item);
			if (position + m_VertScroll->GetPageSize() > allItemsHeight) { m_VertScroll->SetValue(allItemsHeight - m_VertScroll->GetPageSize()); }
		}
	}
	BuildBitmap(false, true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ScrollToSelected() {
	if (!m_SelectedList.empty()) {
		ScrollToItem(*(m_SelectedList.begin()));
		BuildBitmap(false, true);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ScrollToTop() {
	m_VertScroll->SetValue(0);
	BuildBitmap(false, true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ScrollToBottom() {
	if (m_Items.empty()) {
		m_VertScroll->SetValue(0);
	} else {
		ScrollToItem(m_Items.back());
	}
	BuildBitmap(false, true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SetSelectionScrollingLoop(bool scrollLoop) {
	m_LoopSelectionScroll = scrollLoop;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SetMouseScrolling(bool mouseScroll) {
	m_MouseScroll = mouseScroll;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ScrollBarScrolling(int mouseWheelChange){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SelectionListScrolling(int scrollDir){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::AdjustScrollbars(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnKeyPress(int KeyCode, int Modifier){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnKeyDown(int KeyCode, int Modifier) {
	SendSignal(KeyDown, KeyCode);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIListPanel::PointInsideList(int X, int Y) {
	bool inside = PointInside(X, Y);
	// Exclude the scrollbars if we are meant to
	if (inside && m_HorzScroll->PointInside(X, Y) || m_VertScroll->PointInside(X, Y)) { inside = false; }
	return inside;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnGainFocus() {
	GUIPanel::OnGainFocus();

	BuildBitmap(false, true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::OnLoseFocus() {
	GUIPanel::OnLoseFocus();

	BuildBitmap(false, true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::ReceiveSignal(GUIPanel* Source, int Code, int Data){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SetMultiSelect(bool MultiSelect) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIListPanel::GetMultiSelect() const {
	return m_MultiSelect;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SetHotTracking(bool HotTrack) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIListPanel::Item * GUIListPanel::GetSelected() {
	return nullptr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::vector<GUIListPanel::Item *> * GUIListPanel::GetSelectionList() {
	return &m_SelectedList;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::vector<GUIListPanel::Item *> * GUIListPanel::GetItemList() {
	return &m_Items;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIListPanel::Item * GUIListPanel::GetItem(int Index) {
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIListPanel::Item* GUIListPanel::GetItem(int X, int Y) { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIListPanel::GetItemHeight(Item* pItem) { return 0; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIListPanel::GetStackHeight(Item *pItem) {
	int height = 0;
	return height;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SetItemValues(int Index, Item &item) {
	if (Index >= 0 && Index < m_Items.size()) { *(m_Items.at(Index)) = item; }
	BuildBitmap(false, true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIListPanel::GetSelectedIndex() {
	return -1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SetSelectedIndex(int Index){}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::DeleteItem(int Index){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SetSize(int Width, int Height) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::SetPositionAbs(int X, int Y) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIListPanel::EnableScrollbars(bool Horizontal, bool Vertical) {
}