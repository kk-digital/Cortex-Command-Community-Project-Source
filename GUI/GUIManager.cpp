#include "GUI.h"
#include "Timer.h"

using namespace RTE;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIManager::GUIManager(GUIInput* input) {
	m_Input = input;
	m_MouseEnabled = true;
	m_UseValidation = false;

	Clear();

	// Maximum time allowed between two clicks for a double click
	// In milliseconds
	//m_DoubleClickTime = GetDoubleClickTime(); // Use windows' system value
	m_DoubleClickTime = 500;
	//m_DoubleClickSize = GetSystemMetrics(SM_CXDOUBLECLK)/2; // Use windows' system value
	m_DoubleClickSize = 2;
	m_DoubleClickButtons = GUIPanel::MOUSE_NONE;

	m_pTimer = new Timer();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIManager::~GUIManager() {
	delete m_pTimer;
	m_pTimer = nullptr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIManager::Clear() {
	m_PanelList.clear();
	m_CapturedPanel = nullptr;
	m_MouseOverPanel = nullptr;
	m_FocusPanel = nullptr;
	m_MouseEnabled = true;
	m_OldMouseX = m_OldMouseY = 0;
	m_UniqueIDCount = 0;

	m_HoverTrack = false;
	m_HoverPanel = nullptr;

	// Double click times
	m_LastMouseDown[0] = -99999.0F;
	m_LastMouseDown[1] = -99999.0F;
	m_LastMouseDown[2] = -99999.0F;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIManager::AddPanel(GUIPanel* panel) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIManager::Update(bool ignoreKeyboardEvents) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIManager::Draw(GUIScreen* Screen) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIManager::CaptureMouse(GUIPanel* Panel) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIManager::ReleaseMouse() {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel* GUIManager::FindBottomPanel(int X, int Y) {
	return nullptr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel* GUIManager::FindTopPanel(int X, int Y) {
	return nullptr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIManager::GetPanelID() {
	return m_UniqueIDCount++;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIManager::MouseInRect(const GUIRect* Rect, int X, int Y) {
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIManager::TrackMouseHover(GUIPanel* Pan, bool Enabled, int Delay) {
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIManager::SetFocus(GUIPanel* Pan) {
}