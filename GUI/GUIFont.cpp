#include "GUI.h"

using namespace RTE;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIFont::GUIFont(const std::string &Name) {
	m_Screen = nullptr;
	m_Font = nullptr;
	m_FontHeight = 0;
	m_Name = Name;
	m_Kerning = 0;
	m_Leading = 0;
	m_ColorCache.clear();

	m_MainColor = 15; // Color index of the main font color
	m_CurrentColor = m_MainColor;
	m_CurrentBitmap = nullptr;

	m_CharIndexCap = 256;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIFont::Load(GUIScreen* Screen, const std::string& Filename) { return false; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIFont::Draw(GUIBitmap *Bitmap, int X, int Y, const std::string &Text, unsigned long Shadow){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIFont::DrawAligned(GUIBitmap *Bitmap, int X, int Y, const std::string &Text, int HAlign, int VAlign, int MaxWidth, unsigned long Shadow){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIFont::SetColor(unsigned long Color){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIFont::CalculateWidth(const std::string& Text) { return 0; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIFont::CalculateWidth(const char Character) { return 0; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIFont::CalculateHeight(const std::string& Text, int MaxWidth) { return 0; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIFont::CacheColor(unsigned long Color){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIFont::FontColor* GUIFont::GetFontColor(unsigned long Color) { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIFont::GetFontHeight() const {
	return m_FontHeight;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::string GUIFont::GetName() const {
	return m_Name;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUIFont::GetKerning() const {
	return m_Kerning;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIFont::Destroy(){}