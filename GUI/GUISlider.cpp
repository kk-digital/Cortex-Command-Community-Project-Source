#include "GUI.h"
#include "GUISlider.h"

using namespace RTE;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUISlider::GUISlider(GUIManager *Manager, GUIControlManager *ControlManager) : GUIControl(), GUIPanel(Manager) {
	m_ControlID = "SLIDER";
	m_DrawBitmap = nullptr;
	m_KnobImage = nullptr;
	m_ControlManager = ControlManager;
	m_Orientation = Horizontal;
	m_TickDirection = BottomRight;
	m_KnobPosition = 0;
	m_KnobSize = 0;
	m_KnobGrabbed = false;
	m_Minimum = 0;
	m_Value = 0;
	m_Maximum = 100;
	m_ValueResolution = 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::Create(const std::string &Name, int X, int Y, int Width, int Height) {
	GUIControl::Create(Name, X, Y, Width, Height);

	// Minimum size of the control
	m_MinWidth = 40;
	m_MinHeight = 10;

	// Default size of the control
	m_DefWidth = 100;
	m_DefHeight = 20;

	// Setup the panel
	m_X = X;
	m_Y = Y;
	m_Width = m_DefWidth;
	m_Height = m_DefHeight;

	if (Width != -1) { m_Width = Width; }
	if (Height != -1) { m_Height = Height; }

	// Re-Calculate the knob info
	CalculateKnob();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::Create(GUIProperties *Props){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::Destroy(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::ChangeSkin(GUISkin *Skin){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::BuildBitmap(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::BuildLine(const std::string &Section, GUIBitmap *SrcImage){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::Draw(GUIScreen *Screen){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::OnMouseDown(int X, int Y, int Buttons, int Modifier){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::OnMouseUp(int X, int Y, int Buttons, int Modifier){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::OnMouseMove(int X, int Y, int Buttons, int Modifier){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::OnMouseWheelChange(int x, int y, int modifier, int mouseWheelChange){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel * GUISlider::GetPanel() {
	return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::CalculateKnob(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::Move(int X, int Y) {
	GUIPanel::SetPositionAbs(X, Y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::Resize(int Width, int Height){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::GetControlRect(int *X, int *Y, int *Width, int *Height){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::SetOrientation(int Orientation){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUISlider::GetOrientation() const {
	return m_Orientation;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::SetTickDirection(int TickDir){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUISlider::GetTickDirection() const {
	return m_TickDirection;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::SetMinimum(int Minimum){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUISlider::GetMinimum() const {
	return m_Minimum;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::SetMaximum(int Maximum){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUISlider::GetMaximum() const {
	return m_Maximum;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::SetValue(int Value){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GUISlider::GetValue() const {
	return m_Value;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::StoreProperties(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::ApplyProperties(GUIProperties *Props){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUISlider::SetValueResolution(int valueRes) {
	if (valueRes >= 1 && valueRes <= m_Maximum - m_Minimum) { m_ValueResolution = valueRes; }
}