#include "GUI.h"
#include "GUIRadioButton.h"

using namespace RTE;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIRadioButton::GUIRadioButton(GUIManager *Manager, GUIControlManager *ControlManager) : GUIControl(), GUIPanel(Manager) {
	m_ControlID = "RADIOBUTTON";
	m_Image = nullptr;
	m_ControlManager = ControlManager;
	m_Checked = false;
	m_Font = 0;
	m_Mouseover = false;
	m_FontColor = 0;
	m_Text = "";
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::Create(const std::string& Name, int X, int Y, int Width, int Height) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::Create(GUIProperties* Props) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::ChangeSkin(GUISkin* Skin) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::BuildBitmap() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::Draw(GUIScreen* Screen) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::OnMouseDown(int X, int Y, int Buttons, int Modifier) {
	if (Buttons & MOUSE_LEFT) {
		// Push the checkbox down
		CaptureMouse();
		SetFocus();

		AddEvent(GUIEvent::Notification, Pushed, 0);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::OnMouseUp(int X, int Y, int Buttons, int Modifier) {
	ReleaseMouse();

	// If the mouse is over the button, add the command to the event queue
	if (PointInside(X, Y) && Buttons & MOUSE_LEFT) { SetCheck(true); }

	AddEvent(GUIEvent::Notification, UnPushed, 0);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::OnMouseEnter(int X, int Y, int Buttons, int Modifier) {
	m_Mouseover = true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::OnMouseLeave(int X, int Y, int Buttons, int Modifier) {
	m_Mouseover = false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUIPanel * GUIRadioButton::GetPanel() {
	return this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::Move(int X, int Y) {
	GUIPanel::SetPositionAbs(X, Y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::Resize(int Width, int Height) {
	// Make sure the control isn't too small
	Width = std::max(Width, m_MinWidth);
	Height = std::max(Height, m_MinHeight);

	GUIPanel::SetSize(Width, Height);

	// Rebuild the bitmap
	BuildBitmap();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::GetControlRect(int *X, int *Y, int *Width, int *Height) {
	GUIPanel::GetRect(X, Y, Width, Height);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::StoreProperties() {
	m_Properties.AddVariable("Text", m_Text);
	m_Properties.AddVariable("Checked", m_Checked);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::SetCheck(bool Check) {
	// Nothing to do if already in the same state
	if (m_Checked == Check) {
		return;
	}

	m_Checked = Check;

	AddEvent(GUIEvent::Notification, Changed, Check);

	// Don't worry if we are not checked
	if (!m_Checked) {
		return;
	}

	// Go through all my RadioButton siblings and un-check them
	if (m_ControlParent) {
		std::vector<GUIControl *>::iterator it;
		std::vector<GUIControl *> *Children = m_ControlParent->GetChildren();

		for (it = Children->begin(); it != Children->end(); it++) {
			GUIControl *C = *it;
			if (C) {
				// Make sure this is not me
				if (C->GetPanel() && GetPanel() && C->GetPanel()->GetPanelID() == GetPanel()->GetPanelID()) {
					continue;
				}

				// Make sure the control is a radio button
				if (C->GetID().compare(GetID()) == 0) {
					GUIRadioButton *R = (GUIRadioButton *)C;
					R->SetCheck(false);
				}
			}
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GUIRadioButton::GetCheck() const {
	return m_Checked;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::SetText(const std::string &Text) {
	m_Text = Text;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::string GUIRadioButton::GetText() const {
	return m_Text;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GUIRadioButton::ApplyProperties(GUIProperties *Props) {
	GUIControl::ApplyProperties(Props);

	m_Properties.GetValue("Text", &m_Text);
	m_Properties.GetValue("Checked", &m_Checked);
}