#include "ConsoleMan.h"
#include "FrameMan.h"
#include "PostProcessMan.h"
#include "AudioMan.h"
#include "SettingsMan.h"
#include "PerformanceMan.h"
#include "UInputMan.h"

#include "RakSleep.h"

#include "NetworkClient.h"
#include <lz4.h>

namespace RTE {

	// Data structure for constructing the draw boxes we'll need to use for drawing SceneLayers.
	struct SLDrawBox {
		int sourceX;
		int sourceY;
		int sourceW;
		int sourceH;
		int destX;
		int destY;
	};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::Clear() {
		m_LastInputSentTime = 0;
		m_ReceivedData = 0;
		m_CompressedData = 0;
		m_IsConnected = false;
		m_IsRegistered = false;
		m_ClientInputFps = 120;
		m_SceneBackgroundBitmap = 0;
		m_SceneForegroundBitmap = 0;
		m_CurrentSceneLayerReceived = -1;
		m_CurrentFrame = 0;
		m_UseNATPunchThroughService = false;
		m_ServerGUID = RakNet::UNASSIGNED_RAKNET_GUID;
		m_NATServiceServerID = RakNet::UNASSIGNED_SYSTEM_ADDRESS;
		m_ServerID = RakNet::UNASSIGNED_SYSTEM_ADDRESS;
		m_IsNATPunched = false;
		m_ActiveBackgroundLayers = 0;
		m_SceneWrapsX = false;

		for (int f = 0; f < c_FramesToRemember; f++) {
			m_TargetPos[f].Reset();
		}
		for (int i = 0; i < c_MaxLayersStoredForNetwork; i++) {
			m_BackgroundBitmaps[i] = 0;
		}
		for (int i = 0; i < MAX_MOUSE_BUTTONS; i++) {
			m_MouseButtonPressedState[i] = -1;
			m_MouseButtonReleasedState[i] = -1;
		}
		// Stop all sounds received from server
		for (const std::pair<unsigned short, SoundContainer *> &soundEntry : m_ServerSounds) {
			soundEntry.second->Stop();
			delete soundEntry.second;
		}
		m_ServerSounds.clear();
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	int NetworkClient::Initialize() {
		// Record the first client that connects to us so we can pass it to the ping function
		m_ClientID = RakNet::UNASSIGNED_SYSTEM_ADDRESS;
		m_Client = RakNet::RakPeerInterface::GetInstance();

		return 0;
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::Connect(std::string serverName, unsigned short serverPort, std::string playerName) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ConnectNAT(RakNet::SystemAddress address) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::Disconnect() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::PerformNATPunchThrough(std::string serviceServerName, unsigned short serviceServerPort, std::string playerName, std::string serverName, std::string serverPassword) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	RakNet::SystemAddress NetworkClient::ConnectBlocking(RakNet::RakPeerInterface* rakPeer, const char* address, unsigned short port) { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	unsigned char NetworkClient::GetPacketIdentifier(RakNet::Packet* packet) const { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::SendRegisterMsg() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveAcceptedMsg() {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::SendDisconnectMsg() {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::SendServerGUIDRequest(RakNet::SystemAddress address, std::string serverName, std::string serverPassword) {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveServerGUIDAnswer(RakNet::Packet *packet) {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::SendInputMsg() {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveFrameSetupMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveFrameLineMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveFrameBoxMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::SendSceneAcceptedMsg() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveSceneMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveSceneEndMsg() {
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveSceneSetupMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::SendSceneSetupAcceptedMsg() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveTerrainChangeMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceivePostEffectsMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveSoundEventsMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::ReceiveMusicEventsMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::DrawBackgrounds(BITMAP* targetBitmap) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::DrawPostEffects(int frame) { g_PostProcessMan.SetNetworkPostEffectsList(0, m_PostEffects[frame]); }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::DrawFrame() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::Update() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkClient::HandleNetworkPackets() {}
}
