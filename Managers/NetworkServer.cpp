#include "NetworkServer.h"

#include "GUI.h"
#include "GUIInput.h"
#include "AllegroBitmap.h"

#include "Scene.h"
#include "SLTerrain.h"
#include "GameActivity.h"

#include "SettingsMan.h"
#include "ConsoleMan.h"
#include "UInputMan.h"
#include "TimerMan.h"
#include "AudioMan.h"

#include "RakNetStatistics.h"
#include "RakSleep.h"

#include <lz4.h>
#include <lz4hc.h>

namespace RTE {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::BackgroundSendThreadFunction(NetworkServer *server, short player) {
		const int sleepTime = 1000000 / server->m_EncodingFps;
		while (server->IsServerModeEnabled() && server->IsPlayerConnected(player)) {
			if (server->NeedToSendSceneSetupData(player) && server->IsSceneAvailable(player)) {
				server->SendSceneSetupData(player);
			}
			if (server->NeedToSendSceneData(player) && server->IsSceneAvailable(player)) {
				server->ClearTerrainChangeQueue(player);
				server->SendSceneData(player);
			}
			if (server->SendFrameData(player)) {
				server->SendFrame(player);
				std::this_thread::sleep_for(std::chrono::microseconds(sleepTime));
			}
			server->UpdateStats(player);
		}
		server->SetThreadExitReason(player, NetworkServer::THREAD_FINISH);

	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::Clear() {
		m_SleepWhenIdle = false;
		m_SimSleepWhenIdle = false;

		for (short i = 0; i < c_MaxClients; i++) {
			m_BackBuffer8[i] = 0;
			m_BackBufferGUI8[i] = 0;

			m_LastFrameSentTime[i] = 0;
			m_LastStatResetTime[i] = 0;

			m_DelayedFrames[i] = 0;
			m_MsecPerFrame[i] = 0;
			m_MsecPerSendCall[i] = 0;

			m_LZ4CompressionState[i] = 0;
			m_LZ4FastCompressionState[i] = 0;

			m_MouseState1[i] = 0;
			m_MouseState2[i] = 0;
			m_MouseState3[i] = 0;

			m_MouseEvent1[i] = 0;
			m_MouseEvent2[i] = 0;
			m_MouseEvent3[i] = 0;

			m_SendEven[i] = false;

			m_ThreadExitReason[i] = 0;
			m_MSecsToSleep[i] = 0;

			// Set to send scene setup data by default
			m_SendSceneSetupData[i] = false;
			m_SendSceneData[i] = false;
			m_SceneAvailable[i] = false;
			m_SendFrameData[i] = false;

			m_EndActivityVotes[i] = false;
			m_RestartActivityVotes[i] = false;

			m_FrameNumbers[i] = 0;

			m_Ping[i] = 0;
			m_PingTimer[i].Reset();

			ClearInputMessages(i);
		}

		for (short i = 0; i < MAX_STAT_RECORDS; i++) {
			m_FramesSent[i] = 0;
			m_FramesSkipped[i] = 0;

			for (int j = 0; j < 2; j++) {
				m_DataUncompressedCurrent[i][j] = 0;
				m_DataSentCurrent[i][j] = 0;
				m_FrameDataSentCurrent[i][j] = 0;
				m_PostEffectDataSentCurrent[i][j] = 0;
				m_SoundDataSentCurrent[i][j] = 0;
				m_TerrainDataSentCurrent[i][j] = 0;
				m_OtherDataSentCurrent[i][j] = 0;
			}

			m_FrameDataSentTotal[i] = 0;
			m_PostEffectDataSentTotal[i] = 0;
			m_TerrainDataSentTotal[i] = 0;
			m_OtherDataSentTotal[i] = 0;

			m_DataUncompressedTotal[i] = 0;
			m_DataSentTotal[i] = 0;

			m_SendBufferBytes[i] = 0;
			m_SendBufferMessages[i] = 0;

			m_EmptyBlocks[i] = 0;
			m_FullBlocks[i] = 0;
		}

		m_UseHighCompression = true;
		m_UseFastCompression = false;
		m_HighCompressionLevel = LZ4HC_CLEVEL_OPT_MIN;
		m_FastAccelerationFactor = 10;
		m_UseInterlacing = false;
		m_EncodingFps = 60;
		m_ShowInput = false;
		m_ShowStats = false;
		m_TransmitAsBoxes = true;
		m_BoxWidth = 64;
		m_BoxHeight = 88;
		m_UseNATService = false;
		m_NatServerConnected = false;
		m_LastPackedReceived.Reset();
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	int NetworkServer::Initialize() { return 0; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::Destroy() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	bool NetworkServer::ReadyForSimulation() { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SetServerPort(const std::string& newPort) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::Start() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::LockScene(bool isLocked) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ResetScene(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::RegisterTerrainChange(SceneMan::TerrainChange terrainChange) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	unsigned char NetworkServer::GetPacketIdentifier(RakNet::Packet* packet) const { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ReceiveNewIncomingConnection(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendAcceptedMsg(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ReceiveDisconnection(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ReceiveRegisterMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendNATServerRegistrationMsg(RakNet::SystemAddress address) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ReceiveInputMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ProcessInputMsg(short player, MsgInput msg) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ClearInputMessages(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendSoundData(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendMusicData(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendSceneSetupData(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ReceiveSceneSetupDataAccepted(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendSceneData(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ClearTerrainChangeQueue(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	bool NetworkServer::NeedToProcessTerrainChanges(short player) { return false; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ProcessTerrainChanges(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendTerrainChangeMsg(short player, SceneMan::TerrainChange terrainChange) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::ReceiveSceneAcceptedMsg(RakNet::Packet* packet) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendSceneEndMsg(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::CreateBackBuffer(short player, int w, int h) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::DestroyBackBuffer(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendFrameSetupMsg(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::SendPostEffectData(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	int NetworkServer::SendFrame(short player) { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::UpdateStats(short player) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::DrawStatisticsData() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	RakNet::SystemAddress NetworkServer::ConnectBlocking(RakNet::RakPeerInterface* rakPeer, const char* address, unsigned short port) { return NULL; }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::Update(bool processInput){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void NetworkServer::HandleNetworkPackets(){}
}
