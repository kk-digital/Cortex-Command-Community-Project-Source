//////////////////////////////////////////////////////////////////////////////////////////
// File:            ACrab.cpp
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Source file for the ACrab class.
// Project:         Retro Terrain Engine
// Author(s):       Daniel Tabar
//                  data@datarealms.com
//                  http://www.datarealms.com


//////////////////////////////////////////////////////////////////////////////////////////
// Inclusions of header files

#include "ACrab.h"
#include "AtomGroup.h"
#include "Attachable.h"
#include "ThrownDevice.h"
#include "Turret.h"
#include "Leg.h"
#include "Controller.h"
#include "Matrix.h"
#include "AEmitter.h"
#include "HDFirearm.h"
#include "PieMenuGUI.h"
#include "Scene.h"
#include "SettingsMan.h"
#include "PresetMan.h"

#include "GUI.h"
#include "AllegroBitmap.h"

namespace RTE {

ConcreteClassInfo(ACrab, Actor, 20);


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Clear
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Clears all the member variables of this ACrab, effectively
//                  resetting the members of this abstraction level only.

void ACrab::Clear() {}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Makes the ACrab object ready for use.

int ACrab::Create() { return 0; }

//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Creates a ACrab to be identical to another, by deep copy.

int ACrab::Create(const ACrab &reference) { return 0; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  ReadProperty
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Reads a property value from a reader stream. If the name isn't
//                  recognized by this class, then ReadProperty of the parent class
//                  is called. If the property isn't recognized by any of the base classes,
//                  false is returned, and the reader's position is untouched.

int ACrab::ReadProperty(const std::string_view &propName, Reader &reader) { return 0; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Save
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Saves the complete state of this ACrab with a Writer for
//                  later recreation with Create(Reader &reader);

int ACrab::Save(Writer &writer) const
{
    return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Destroy
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Destroys and resets (through Clear()) the ACrab object.

void ACrab::Destroy(bool notInherited) {}

/*
//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetTotalValue
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the total liquidation value of this Actor and all its carried
//                  gold and inventory.

float ACrab::GetTotalValue(int nativeModule, float foreignMult) const
{
    float totalValue = Actor::GetTotalValue(nativeModule, foreignMult);

    return totalValue;
}
*/
/*
//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  GetCPUPos
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the absoltue position of this' brain, or equivalent.

Vector ACrab::GetCPUPos() const
{
    if (m_pTurret && m_pTurret->IsAttached() && m_pTurret->GetMountedMO())
        return m_pTurret->GetMountedMO()->GetPos();

    return m_Pos;
}
*/

//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  GetEyePos
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the absoltue position of this' eye, or equivalent, where look
//                  vector starts from.

Vector ACrab::GetEyePos() const
{
    if (m_pTurret && m_pTurret->IsAttached() && m_pTurret->HasMountedDevice())
        return m_pTurret->GetFirstMountedDevice()->GetPos();

    return m_Pos;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ACrab::SetTurret(Turret* newTurret) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ACrab::SetJetpack(AEmitter* newJetpack) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ACrab::SetLeftFGLeg(Leg* newLeg) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ACrab::SetLeftBGLeg(Leg* newLeg) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ACrab::SetRightFGLeg(Leg* newLeg) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ACrab::SetRightBGLeg(Leg* newLeg) {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BITMAP * ACrab::GetGraphicalIcon() const {
	return m_GraphicalIcon ? m_GraphicalIcon : (m_pTurret ? m_pTurret->GetSpriteFrame(0) : GetSpriteFrame(0));
}

//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  CollideAtPoint
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Calculates the collision response when another MO's Atom collides with
//                  this MO's physical representation. The effects will be applied
//                  directly to this MO, and also represented in the passed in HitData.

bool ACrab::CollideAtPoint(HitData& hd)
{
    return Actor::CollideAtPoint(hd);

}
//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  AddPieMenuSlices
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Adds all slices this needs on a pie menu.

bool ACrab::AddPieMenuSlices(PieMenuGUI* pPieMenu) { return false; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  HandlePieCommand
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Handles and does whatever a specific activated Pie Menu slice does to
//                  this.

bool ACrab::HandlePieCommand(PieSlice::PieSliceIndex pieSliceIndex) { return false; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  GetEquippedItem
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Returns whatever is equipped in the turret, if anything. OWNERSHIP IS NOT TRANSFERRED!

MovableObject * ACrab::GetEquippedItem() const
{
    if (m_pTurret && m_pTurret->IsAttached() && m_pTurret->HasMountedDevice())
    {
        return m_pTurret->GetFirstMountedDevice();
    }

    return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  FirearmIsReady
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Indicates whether the currently held device's current mag is empty on
//                  ammo or not.

bool ACrab::FirearmIsReady() const { return false; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  FirearmIsEmpty
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Indicates whether the currently held HDFirearm's is out of ammo.

bool ACrab::FirearmIsEmpty() const { return false; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  FirearmNeedsReload
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Indicates whether the currently held HDFirearm's is almost out of ammo.

bool ACrab::FirearmsAreFull() const { return false; }

//////////////////////////////////////////////////////////////////////////////////////////

bool ACrab::FirearmNeedsReload() const { return false; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  FirearmIsSemiAuto
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Indicates whether the currently held HDFirearm's is semi or full auto.

bool ACrab::FirearmIsSemiAuto() const { return false; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  ReloadFirearms
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Reloads the currently held firearms, if any.
// Arguments:       None.
// Return value:    None.

void ACrab::ReloadFirearms() {}

//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  FirearmActivationDelay
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Returns the currently held device's delay between pulling the trigger
//                  and activating.

int ACrab::FirearmActivationDelay() const { return 0; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  IsWithinRange
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Tells whether a point on the scene is within range of the currently
//                  used device and aiming status, if applicable.

bool ACrab::IsWithinRange(Vector &point) const { return false; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Look
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Casts an unseen-revealing ray in the direction of where this is facing.
// Arguments:       The degree angle to deviate from the current view point in the ray
//                  casting. A random ray will be chosen out of this +-range.

bool ACrab::Look(float FOVSpread, float range) { return false; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  LookForMOs
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Casts an MO detecting ray in the direction of where the head is looking
//                  at the time. Factors including head rotation, sharp aim mode, and
//                  other variables determine how this ray is cast.

MovableObject* ACrab::LookForMOs(float FOVSpread, unsigned char ignoreMaterial, bool ignoreAllTerrain) { return NULL; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          UpdateMovePath
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Updates the path to move along to the currently set movetarget.

bool ACrab::UpdateMovePath() { return false; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  UpdateAI
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Updates this' AI state. Supposed to be done every frame that this has
//                  a CAI controller controlling it.

void ACrab::UpdateAI() {}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Update
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Updates this ACrab. Supposed to be done every frame.

void ACrab::Update() {}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ACrab::Draw(BITMAP* pTargetBitmap, const Vector& targetPos, DrawMode mode, bool onlyPhysical) const {}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  DrawHUD
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws this Actor's current graphical HUD overlay representation to a
//                  BITMAP of choice.

void ACrab::DrawHUD(BITMAP* pTargetBitmap, const Vector& targetPos, int whichScreen, bool playerControlled) {}

//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  GetLimbPathSpeed
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Get walking limb path speed for the specified preset.

float ACrab::GetLimbPathSpeed(int speedPreset) const { return 0; }

//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  SetLimbPathSpeed
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Set walking limb path speed for the specified preset.

void ACrab::SetLimbPathSpeed(int speedPreset, float speed) {}

//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  GetLimbPathPushForce
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the force that a limb traveling walking LimbPath can push against
//                  stuff in the scene with. 

float ACrab::GetLimbPathPushForce() const
{
	return m_Paths[LEFTSIDE][FGROUND][WALK].GetDefaultPushForce();
}

//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  SetLimbPathPushForce
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the default force that a limb traveling walking LimbPath can push against
//                  stuff in the scene with. 

void ACrab::SetLimbPathPushForce(float force) {}



} // namespace RTE
