//////////////////////////////////////////////////////////////////////////////////////////
// File:            GibEditorGUI.cpp
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Implementation file for the GibEditorGUI class
// Project:         GUI Library
// Author(s):       Daniel Tabar
//                  dtabar@datarealms.com
//                  http://www.datarealms.com


//////////////////////////////////////////////////////////////////////////////////////////
// Inclusions of header files

#include "GibEditorGUI.h"
#include "GUISound.h"

#include "FrameMan.h"
#include "PresetMan.h"
#include "ActivityMan.h"
#include "UInputMan.h"

#include "Controller.h"
#include "MOSprite.h"
#include "HeldDevice.h"
#include "TerrainObject.h"
#include "AHuman.h"
#include "SLTerrain.h"
#include "ObjectPickerGUI.h"
#include "PieMenuGUI.h"

using namespace RTE;

#define MAXZOOMFACTOR 5
#define MINZOOMFACTOR 1

//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Clear
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Clears all the member variables of this GibEditorGUI, effectively
//                  resetting the members of this abstraction level only.

void GibEditorGUI::Clear()
{
    m_pController = 0;
    m_EditMade = false;
    m_EditorGUIMode = PICKINGGIB;
    m_PreviousMode = ADDINGGIB;
    m_pObjectToLoad = 0;
    m_BlinkTimer.Reset();
    m_BlinkMode = NOBLINK;
    m_RepeatStartTimer.Reset();
    m_RepeatTimer.Reset();
    m_pPieMenu = 0;
    m_ActivatedPieSliceType = PieSlice::PieSliceIndex::PSI_NONE;
    m_pPicker = 0;
    m_GridSnapping = false;
    m_pZoomSource = 0;
    m_ZoomFactor = 1;
    m_CursorPos.Reset();
    m_CursorOffset.Reset();
    m_CursorInAir = true;
    m_FacingLeft = false;
    m_PlacedGibs.clear();
    m_pCurrentGib = 0;
    m_GibListOrder = -1;
    m_DrawCurrentGib = true;
    m_pObjectToBlink = 0;
}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Makes the GibEditorGUI object ready for use.

int GibEditorGUI::Create(Controller* pController, int whichModuleSpace) { return 0; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Destroy
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Destroys and resets (through Clear()) the GibEditorGUI object.

void GibEditorGUI::Destroy(){}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetController
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the controller used by this. The ownership of the controller is
//                  NOT transferred!

void GibEditorGUI::SetController(Controller *pController){}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetPosOnScreen
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets where on the screen that this GUI is being drawn to. If upper
//                  left corner, then 0, 0. This will affect the way the mouse is positioned
//                  etc.

void GibEditorGUI::SetPosOnScreen(int newPosX, int newPosY){}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetModuleSpace
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets which DataModule space to be picking objects from. If -1, then
//                  let the player pick from all loaded modules.

void GibEditorGUI::SetModuleSpace(int moduleSpaceID){}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Update
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Updates the state of this Menu each frame

void GibEditorGUI::Update(){}


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  Draw
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws the menu

void GibEditorGUI::Draw(BITMAP *pTargetBitmap, const Vector &targetPos) const{}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          UpdatePieMenu
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Updates the PieMenu config based ont eh current editor state.

void GibEditorGUI::UpdatePieMenu(){}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          AddPlacedObject
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Adds a MovableObject to be placed in this scene. Ownership IS transferred!

void GibEditorGUI::AddPlacedObject(MovableObject *pObjectToAdd, int listOrder){}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          RemovePlacedObject
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Removes a MovableObject placed in this scene.

void GibEditorGUI::RemovePlacedObject(int whichToRemove){}


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          PickPlacedObject
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Returns the last placed object that graphically overlaps an absolute
//                  point in the scene.

const MovableObject* GibEditorGUI::PickPlacedObject(Vector& scenePoint, int* pListOrderPlace) const { return NULL; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          UpdatePlacedObjects
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Updated the objects in the placed scene objects list of this. This is
//                  mostly for the editor to represent the items correctly.

void GibEditorGUI::UpdatePlacedObjects(){}